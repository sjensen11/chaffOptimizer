%% demoscript
%only including this for completeness. Will include a mat file that has
%necessary chaff and this part can be skipped. As such, both chf
%generations are commented out for speed.

%operating frequency (this can be an array, using one value, so rcs plots
%don't get crazy)
freq = 10*10^9; %hz 

%plate size
plateLength = 2 * .0254; %2 inches converted to meters

%angles to be optimized over
%not showing that part of code, so just leaving these as a single value
thetaVals = 0;
phiVals = 0;

%set NumCells: controls number of cells across a single row, so for example 
%a 10x10 would have 100 cells total. each one of these cells can be turned
%on or off
%what the z-matrix actually cares about is edges of each of those cells 
%though, because that's where the basis function 'exists' There's a set of 
%basis function for the x-directed current and the y-directed current, so
%total size of the z-matrix would be 2*N*(N-1) x 2*N*(N-1) or taking
%ex) 10x10, z-matrix size would be 180x180 
%to turn a cell off, the edges surrounding that cell are removed
%can set here or its defaults to lambda/10 division 
NumCells_ = 28;

%set pixelSize: the number of cells in each pixel, needs to be able to
%divide NumCells and get an integer value out which will be the number
%of pixels... ex) 24/6 will give a 4 pixel resolution
pixelSize = 4;



%create odd chaff
tic
chf_odd = chaffElt(freq,plateLength,thetaVals, phiVals,NumCells,pixelSize);
toc

%create even chaff
NumCells = 32
tic
chf_even = chaffElt(freq,plateLength,thetaVals, phiVals,NumCells,pixelSize);
toc

%% set pattern
%function takes in a lower triangle matrix and transforms it for a
%symmetric chaff
%this sets it to something random for testing
pixelNum = NumCells/pixelSize 
lt = randi([0 1],4);
lt = tril(lt)
%this sets it 
% nullPixelLT = [1 0 0 0;...
%                1 0 0 0;...
%                1 1 0 0;...
%                1 1 0 1];
%% set symmetric pattern - even

%odd plots
chf_even = chf_even.symmetricNullPix(nullPixelLT)
chf_even.plotNullPos
%% set symmetric pattern - odd

%odd plots
chf_odd = chf_odd.symmetricNullPix(nullPixelLT)
chf_odd.plotNullPos
%% plot RCS
%here's a couple lines that plot rcs

%plots monostatic RCS in cartesian grid with theta and phi as the axes
dbOn = 0; %plot raw values
chf.plotMonoFlat(dbOn)

%plots bistatic RCS at at scattering angle. Theta is the x-axis
%generates 4 graphs for each incident polarization vs scattering
%polarization
phiScat = 0;
chf.plotBiRCS(phiScat)
